import json
import os
from django.shortcuts import render
from wechat_app.models import *
from django.http import HttpResponse, JsonResponse
from django.db import transaction
from wechat.settings import UPLOADFILES_DIR
from django.db.utils import IntegrityError
import hashlib


# Create your views here.
def ReplyList(req):
    return render(req, "wechat/reply/list.html", locals())


def ReplyData(req):
    page = int(req.GET.get("page"))
    limit = int(req.GET.get("limit"))
    keyword = req.GET.get("keyword")
    if keyword:
        reply_obj = Reply.objects.filter(keyword__contains=keyword)
        count = reply_obj.count()
        reply_list = reply_obj.all()[(page - 1) * limit:page * limit]
    else:
        reply_obj = Reply.objects
        count = reply_obj.count()
        reply_list = reply_obj.all()[(page - 1) * limit:page * limit]
    reply_msg_data = []
    for reply in reply_list:
        reply_info = {
            "id": reply.id,
            "keyword": reply.keyword,
            "type": reply.type_list[int(reply.type) - 1][1],
            "chatrooms": [item[0] for item in
                          ReplyToChatroom.objects.filter(reply_id=reply.id).values_list("chatroom__nickname")]
        }
        if reply.type == 1:
            reply_info["reply"] = reply.msg
        else:
            reply_info["reply"] = os.path.split(reply.filename)[1]
        reply_msg_data.append(reply_info)
    Replay_list = {"data": reply_msg_data, "msg": "", "code": 0, "count": count}
    rdata = json.dumps(Replay_list)
    return HttpResponse(rdata, content_type="application/json", )


def ReplyAdd(req):
    if req.method == "GET":
        reply = Reply
        chatrooms = Chatroom.objects.all()
        return render(req, "wechat/reply/add.html", locals())
    else:
        response = {"code": 200, "msg": "回复消息添加成功"}
        keyword = req.POST.get("keyword")
        msg = req.POST.get("msg")
        type = req.POST.get("type")
        filename = req.POST.get("file_path")
        chatroom_list = [v for k, v in req.POST.items() if k.startswith("id")]
        if not keyword:
            response["code"] = 401
            response["msg"] = "请输入关键词"
        else:
            if type == "1":
                if not msg:
                    response["code"] = 402
                    response["msg"] = "请输入回复语句"
                else:
                    reply_obj = Reply.objects.create(keyword=keyword, msg=msg, type=type)
                    for chatroom in chatroom_list:
                        ReplyToChatroom.objects.create(chatroom_id=chatroom, reply=reply_obj)
            else:
                if not filename:
                    response["code"] = 403
                    response["msg"] = "请选择上传内容"
                else:
                    filepath = os.path.join(UPLOADFILES_DIR, filename_hash(filename))
                    reply_obj = Reply.objects.create(keyword=keyword, type=type, filename=filename, filepath=filepath)
                    for chatroom in chatroom_list:
                        ReplyToChatroom.objects.create(chatroom_id=chatroom, reply=reply_obj)
        return JsonResponse(response)


def ReplyEdit(req, id):
    if req.method == "GET":
        reply_msg = Reply.objects.get(id=id)
        have_chatrooms = [item["chatroom_id"] for item in
                          ReplyToChatroom.objects.filter(reply_id=id).values("chatroom_id")]
        chatrooms = Chatroom.objects.all()
        return render(req, "wechat/reply/edit.html", locals())
    else:
        response = {"code": 200, "msg": "回复消息修改成功"}
        keyword = req.POST.get("keyword")
        msg = req.POST.get("msg")
        type = req.POST.get("type")
        filename = req.POST.get("file_path")
        chatroom_list = [v for k, v in req.POST.items() if k.startswith("id")]
        if not keyword:
            response["code"] = 402
            response["msg"] = "请输入关键词"
            return response
        reply_obj = Reply.objects.get(id=id)#原来的回复消息对象
        if type == "1":
            if not msg:
                response["code"] = 403
                response["msg"] = "请输入回复语句"
            else:
                if reply_obj.type != 1:
                    os.remove(reply_obj.filepath.name)
                data = {"keyword": keyword, "msg": msg, "type": type, "file_path": "", "filename": ""}
                reply_obj.__dict__.update(**data)
                reply_obj.save()
                ReplyToChatroom.objects.filter(reply_id=id).delete()
                for chatroom in chatroom_list:
                    ReplyToChatroom.objects.create(reply_id=id, chatroom_id=chatroom)
        else:
            if reply_obj.type != 1:#原来的回复是文件
                os.remove(reply_obj.filepath.name)
            data = {"keyword": keyword, "msg": "", "type": type,
                    "file_path": os.path.join(UPLOADFILES_DIR, filename_hash(filename)), "filename": filename}
            reply_obj.__dict__.update(**data)
            reply_obj.save()
            ReplyToChatroom.objects.filter(reply_id=id).delete()
            for chatroom in chatroom_list:
                ReplyToChatroom.objects.create(reply_id=id, chatroom_id=chatroom)

        # except Exception as e:
        #     response["code"] = 500
        #     response["msg"] = "服务器出现错误"
        return JsonResponse(response)


def ReplyDel(req):
    if req.method == "POST":
        response = {"code": 200, "msg": "回复信息删除成功"}
        msg_list = json.loads(req.POST.get("id"))
        if not isinstance(msg_list, list):
            msg_list = [msg_list, ]
        for msg in msg_list:
            try:
                with transaction.atomic():
                    reply_msg_obj = Reply.objects.get(id=msg)
                    ReplyToChatroom.objects.filter(reply_id=reply_msg_obj).delete()
                    if reply_msg_obj.type != 1:
                        os.remove(reply_msg_obj.filepath.name)
                    reply_msg_obj.delete()
            except Exception as e:
                response["code"] = 500
                response["msg"] = "服务器出现错误"
        return JsonResponse(response)


def UploadFile(req):
    if req.method == "POST":
        response = {"code": 200, "msg": "上传成功"}
        uploadfile = req.FILES.get("file")
        if not isfile_exist(uploadfile.name):
            with open(os.path.join(UPLOADFILES_DIR, filename_hash(uploadfile.name)), "wb") as f:
                for chunk in uploadfile.chunks():
                    f.write(chunk)
            response["filename"] = uploadfile.name
        else:
            response["code"] = 400
            response["msg"] = "文件已存在"
        return JsonResponse(response)


def isfile_exist(filename):
    if os.path.exists(os.path.join(UPLOADFILES_DIR, filename_hash(filename))):
        return True
    else:
        return False


def filename_hash(filename):
    name, ext = filename.rsplit(".", 1)
    m = hashlib.md5()
    m.update(name.encode("utf-8"))
    new_name = m.hexdigest()
    return ".".join([new_name, ext])
